"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_BASE_URL: function() { return /* binding */ API_BASE_URL; },\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001/api\";\nclass APIClient {\n    setToken(token) {\n        this.token = token;\n        if (true) {\n            localStorage.setItem(\"token\", token);\n        }\n    }\n    clearToken() {\n        this.token = null;\n        if (true) {\n            localStorage.removeItem(\"token\");\n        }\n    }\n    // ---------- Helpers ----------\n    authHeader() {\n        return this.token ? {\n            Authorization: \"Bearer \".concat(this.token)\n        } : {};\n    }\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const isFormData = options.body instanceof FormData;\n        const headers = {\n            ...this.authHeader(),\n            ...options.headers,\n            // Only set JSON content-type if not sending FormData\n            ...isFormData ? {} : {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        const response = await fetch(\"\".concat(API_BASE_URL).concat(endpoint), {\n            ...options,\n            headers\n        });\n        if (!response.ok) {\n            // Try to surface server error message; fall back to status text\n            let message = response.statusText || \"An error occurred\";\n            try {\n                const err = await response.json();\n                if (typeof (err === null || err === void 0 ? void 0 : err.error) === \"string\") message = err.error;\n                if (typeof (err === null || err === void 0 ? void 0 : err.message) === \"string\") message = err.message;\n            } catch (e) {\n            /* ignore */ }\n            throw new Error(message);\n        }\n        // If server returns 204 No Content\n        if (response.status === 204) return undefined;\n        return response.json();\n    }\n    async get(endpoint) {\n        return this.request(endpoint, {\n            method: \"GET\"\n        });\n    }\n    async post(endpoint, data) {\n        const body = data instanceof FormData ? data : data !== undefined ? JSON.stringify(data) : undefined;\n        return this.request(endpoint, {\n            method: \"POST\",\n            body\n        });\n    }\n    async put(endpoint, data) {\n        const body = data instanceof FormData ? data : data !== undefined ? JSON.stringify(data) : undefined;\n        return this.request(endpoint, {\n            method: \"PUT\",\n            body\n        });\n    }\n    async patch(endpoint, data) {\n        const body = data instanceof FormData ? data : data !== undefined ? JSON.stringify(data) : undefined;\n        return this.request(endpoint, {\n            method: \"PATCH\",\n            body\n        });\n    }\n    async delete(endpoint) {\n        return this.request(endpoint, {\n            method: \"DELETE\"\n        });\n    }\n    // ---------- Banners ----------\n    async createBanner(form) {\n        // Use API base + auth header; do NOT set Content-Type (browser sets multipart boundary)\n        const res = await fetch(\"\".concat(API_BASE_URL, \"/banners\"), {\n            method: \"POST\",\n            body: form,\n            headers: this.authHeader()\n        });\n        if (!res.ok) {\n            let message = res.statusText || \"Failed to create banner\";\n            try {\n                const err = await res.json();\n                message = (err === null || err === void 0 ? void 0 : err.error) || (err === null || err === void 0 ? void 0 : err.message) || message;\n            } catch (e) {}\n            throw new Error(message);\n        }\n        const data = await res.json();\n        // Normalize/validate\n        const o = data;\n        const normalized = {\n            id: typeof (o === null || o === void 0 ? void 0 : o.id) === \"string\" || typeof (o === null || o === void 0 ? void 0 : o.id) === \"number\" ? o.id : undefined,\n            title: typeof (o === null || o === void 0 ? void 0 : o.title) === \"string\" ? o.title : \"\",\n            description: typeof (o === null || o === void 0 ? void 0 : o.description) === \"string\" ? o.description : undefined,\n            imageUrl: typeof (o === null || o === void 0 ? void 0 : o.imageUrl) === \"string\" ? o.imageUrl : undefined\n        };\n        if (!normalized.title) {\n            throw new Error(\"Server did not return a title for the banner.\");\n        }\n        return normalized;\n    }\n    // ---------- Customers ----------\n    toCustomer(u) {\n        const o = u;\n        const id = typeof (o === null || o === void 0 ? void 0 : o.id) === \"string\" || typeof (o === null || o === void 0 ? void 0 : o.id) === \"number\" ? o.id : undefined;\n        const name = typeof (o === null || o === void 0 ? void 0 : o.name) === \"string\" ? o.name.trim() : \"\";\n        if (!id || !name) throw new Error(\"Invalid customer: missing id or name.\");\n        const phone = typeof (o === null || o === void 0 ? void 0 : o.phone) === \"string\" && o.phone.trim() ? o.phone.trim() : undefined;\n        const email = typeof (o === null || o === void 0 ? void 0 : o.email) === \"string\" && o.email.trim() ? o.email.trim() : undefined;\n        const avatar = typeof (o === null || o === void 0 ? void 0 : o.avatar) === \"string\" && o.avatar.trim() ? o.avatar.trim() : undefined;\n        return {\n            id,\n            name,\n            phone,\n            email,\n            avatar\n        };\n    }\n    toCustomersResponse(u) {\n        const o = u;\n        const arr = Array.isArray(o === null || o === void 0 ? void 0 : o.customers) ? o.customers : null;\n        if (!arr) throw new Error(\"Invalid response: `customers` must be an array.\");\n        return {\n            customers: arr.map((x)=>this.toCustomer(x))\n        };\n    }\n    constructor(){\n        this.token = null;\n        // ---------- Auth ----------\n        this.auth = {\n            register: (data)=>this.post(\"/auth/register\", data),\n            login: (data)=>this.post(\"/auth/login\", data)\n        };\n        this.customers = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/customers\".concat(query));\n            },\n            getMyCustomer: async ()=>{\n                // this.get returns parsed JSON already\n                const data = await this.get(\"/customers/my\");\n                return this.toCustomersResponse(data);\n            },\n            getOne: (id)=>this.get(\"/customers/\".concat(id)),\n            create: (data)=>this.post(\"/customers\", data),\n            update: (id, data)=>this.put(\"/customers/\".concat(id), data),\n            delete: (id)=>this.delete(\"/customers/\".concat(id)),\n            getStats: ()=>this.get(\"/customers/stats\")\n        };\n        // ---------- Orders ----------\n        this.orders = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/orders\".concat(query));\n            },\n            getOne: (id)=>this.get(\"/orders/\".concat(id)),\n            getStats: ()=>this.get(\"/orders/stats\"),\n            create: (data)=>this.post(\"/orders\", data),\n            update: (id, data)=>this.put(\"/orders/\".concat(id), data),\n            delete: (id)=>this.delete(\"/orders/\".concat(id))\n        };\n        // ---------- Measurements ----------\n        this.measurements = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/measurements\".concat(query));\n            },\n            getOne: (id)=>this.get(\"/measurements/\".concat(id)),\n            create: (data)=>this.post(\"/measurements\", data),\n            update: (id, data)=>this.put(\"/measurements/\".concat(id), data),\n            delete: (id)=>this.delete(\"/measurements/\".concat(id))\n        };\n        // ---------- Invoices ----------\n        this.invoices = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/invoices\".concat(query));\n            },\n            getOne: (id)=>this.get(\"/invoices/\".concat(id)),\n            create: (data)=>this.post(\"/invoices\", data),\n            update: (id, data)=>this.put(\"/invoices/\".concat(id), data),\n            generatePDF: (id)=>this.post(\"/invoices/\".concat(id, \"/generate-pdf\")),\n            sendEmail: (id)=>this.post(\"/invoices/\".concat(id, \"/send-email\")),\n            delete: (id)=>this.delete(\"/invoices/\".concat(id))\n        };\n        // ---------- Products ----------\n        this.products = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/products\".concat(query));\n            },\n            getOne: (id)=>this.get(\"/products/\".concat(id)),\n            getCategories: ()=>this.get(\"/products/categories\"),\n            create: (data)=>{\n                return this.post(\"/products\", data);\n            },\n            update: (id, data)=>this.put(\"/products/\".concat(id), data),\n            delete: (id)=>this.delete(\"/products/\".concat(id))\n        };\n        // ---------- Analytics ----------\n        this.analytics = {\n            getDashboard: ()=>this.get(\"/analytics/dashboard\"),\n            getRevenue: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/analytics/revenue\".concat(query));\n            },\n            getTopProducts: (limit)=>{\n                const query = limit ? \"?limit=\".concat(limit) : \"\";\n                return this.get(\"/analytics/top-products\".concat(query));\n            },\n            getTopCustomers: (limit)=>{\n                const query = limit ? \"?limit=\".concat(limit) : \"\";\n                return this.get(\"/analytics/top-customers\".concat(query));\n            },\n            getCustomerInsights: ()=>this.get(\"/analytics/customer-insights\"),\n            getOrderTrends: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/analytics/order-trends\".concat(query));\n            }\n        };\n        if (true) {\n            this.token = localStorage.getItem(\"token\");\n        }\n    }\n}\nconst apiClient = new APIClient();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});