"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/customers/add/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_BASE_URL: function() { return /* binding */ API_BASE_URL; },\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001/api\";\nclass APIClient {\n    setToken(token) {\n        this.token = token;\n        if (true) {\n            localStorage.setItem(\"token\", token);\n        }\n    }\n    clearToken() {\n        this.token = null;\n        if (true) {\n            localStorage.removeItem(\"token\");\n        }\n    }\n    // ---------- Helpers ----------\n    authHeader() {\n        return this.token ? {\n            Authorization: \"Bearer \".concat(this.token)\n        } : {};\n    }\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const isFormData = options.body instanceof FormData;\n        const headers = {\n            ...this.authHeader(),\n            ...options.headers,\n            // Only set JSON content-type if not sending FormData\n            ...isFormData ? {} : {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        const response = await fetch(\"\".concat(API_BASE_URL).concat(endpoint), {\n            ...options,\n            headers\n        });\n        if (!response.ok) {\n            // Try to surface server error message; fall back to status text\n            let message = response.statusText || \"An error occurred\";\n            try {\n                const err = await response.json();\n                if (typeof (err === null || err === void 0 ? void 0 : err.error) === \"string\") message = err.error;\n                if (typeof (err === null || err === void 0 ? void 0 : err.message) === \"string\") message = err.message;\n            } catch (e) {\n            /* ignore */ }\n            throw new Error(message);\n        }\n        // If server returns 204 No Content\n        if (response.status === 204) return undefined;\n        return response.json();\n    }\n    async get(endpoint) {\n        return this.request(endpoint, {\n            method: \"GET\"\n        });\n    }\n    async post(endpoint, data) {\n        const body = data instanceof FormData ? data : data !== undefined ? JSON.stringify(data) : undefined;\n        return this.request(endpoint, {\n            method: \"POST\",\n            body\n        });\n    }\n    async put(endpoint, data) {\n        const body = data instanceof FormData ? data : data !== undefined ? JSON.stringify(data) : undefined;\n        return this.request(endpoint, {\n            method: \"PUT\",\n            body\n        });\n    }\n    async patch(endpoint, data) {\n        const body = data instanceof FormData ? data : data !== undefined ? JSON.stringify(data) : undefined;\n        return this.request(endpoint, {\n            method: \"PATCH\",\n            body\n        });\n    }\n    async delete(endpoint) {\n        return this.request(endpoint, {\n            method: \"DELETE\"\n        });\n    }\n    // ---------- Customers ----------\n    toCustomer(u) {\n        const o = u;\n        const id = typeof (o === null || o === void 0 ? void 0 : o.id) === \"string\" || typeof (o === null || o === void 0 ? void 0 : o.id) === \"number\" ? o.id : undefined;\n        const name = typeof (o === null || o === void 0 ? void 0 : o.name) === \"string\" ? o.name.trim() : \"\";\n        if (!id || !name) throw new Error(\"Invalid customer: missing id or name.\");\n        const phone = typeof (o === null || o === void 0 ? void 0 : o.phone) === \"string\" && o.phone.trim() ? o.phone.trim() : undefined;\n        const email = typeof (o === null || o === void 0 ? void 0 : o.email) === \"string\" && o.email.trim() ? o.email.trim() : undefined;\n        const avatar = typeof (o === null || o === void 0 ? void 0 : o.avatar) === \"string\" && o.avatar.trim() ? o.avatar.trim() : undefined;\n        return {\n            id,\n            name,\n            phone,\n            email,\n            avatar\n        };\n    }\n    toCustomersResponse(u) {\n        const o = u;\n        const arr = Array.isArray(o === null || o === void 0 ? void 0 : o.customers) ? o.customers : null;\n        if (!arr) throw new Error(\"Invalid response: `customers` must be an array.\");\n        return {\n            customers: arr.map((x)=>this.toCustomer(x))\n        };\n    }\n    constructor(){\n        this.token = null;\n        // ---------- Banners ----------\n        this.banners = {\n            create: (data)=>this.post(\"/banners\", data),\n            get: (businessId)=>this.get(\"/banners/\".concat(businessId)),\n            update: (businessId, data)=>this.put(\"/banners/\".concat(businessId), data),\n            delete: (businessId)=>this.delete(\"/banners/\".concat(businessId))\n        };\n        // ---------- Auth ----------\n        this.auth = {\n            register: (data)=>this.post(\"/auth/register\", data),\n            login: (data)=>this.post(\"/auth/login\", data)\n        };\n        this.customers = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/customers\".concat(query));\n            },\n            getMyCustomer: async ()=>{\n                // this.get returns parsed JSON already\n                const data = await this.get(\"/customers/my\");\n                return this.toCustomersResponse(data);\n            },\n            getOne: (id)=>this.get(\"/customers/\".concat(id)),\n            create: (data)=>this.post(\"/customers\", data),\n            update: (id, data)=>this.put(\"/customers/\".concat(id), data),\n            delete: (id)=>this.delete(\"/customers/\".concat(id)),\n            getStats: ()=>this.get(\"/customers/stats\")\n        };\n        // ---------- Orders ----------\n        this.orders = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/orders\".concat(query));\n            },\n            getCustomerOrders: async (customerId)=>{\n                return await this.get(\"/customers/\".concat(customerId, \"/orders\"));\n            },\n            getOne: (id)=>this.get(\"/orders/\".concat(id)),\n            getStats: ()=>this.get(\"/orders/stats\"),\n            create: (data)=>this.post(\"/orders\", data),\n            update: (id, data)=>this.put(\"/orders/\".concat(id), data),\n            delete: (id)=>this.delete(\"/orders/\".concat(id))\n        };\n        // ---------- Measurements ----------\n        this.measurements = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/measurements\".concat(query));\n            },\n            getCustomerMeasurements: async (customerId)=>{\n                return this.get(\"/measurements/customer/\".concat(customerId));\n            },\n            getOne: (id)=>this.get(\"/measurements/\".concat(id)),\n            create: (data)=>this.post(\"/measurements\", data),\n            update: (id, data)=>this.put(\"/measurements/\".concat(id), data),\n            delete: (id)=>this.delete(\"/measurements/\".concat(id))\n        };\n        // ---------- Invoices ----------\n        this.invoices = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/invoices\".concat(query));\n            },\n            getOne: (id)=>this.get(\"/invoices/\".concat(id)),\n            create: (data)=>this.post(\"/invoices\", data),\n            update: (id, data)=>this.put(\"/invoices/\".concat(id), data),\n            generatePDF: (id)=>this.post(\"/invoices/\".concat(id, \"/generate-pdf\")),\n            sendEmail: (id)=>this.post(\"/invoices/\".concat(id, \"/send-email\")),\n            delete: (id)=>this.delete(\"/invoices/\".concat(id))\n        };\n        // ---------- Products ----------\n        this.products = {\n            getAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/products\".concat(query));\n            },\n            getMyAll: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/products/my\".concat(query));\n            },\n            getOne: (id)=>this.get(\"/products/\".concat(id)),\n            getCategories: ()=>this.get(\"/products/categories\"),\n            create: (data)=>{\n                return this.post(\"/products\", data);\n            },\n            update: (id, data)=>this.put(\"/products/\".concat(id), data),\n            delete: (id)=>this.delete(\"/products/\".concat(id))\n        };\n        // ---------- Analytics ----------\n        this.analytics = {\n            getDashboard: ()=>this.get(\"/analytics/dashboard\"),\n            getRevenue: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/analytics/revenue\".concat(query));\n            },\n            getTopProducts: (limit)=>{\n                const query = limit ? \"?limit=\".concat(limit) : \"\";\n                return this.get(\"/analytics/top-products\".concat(query));\n            },\n            getTopCustomers: (limit)=>{\n                const query = limit ? \"?limit=\".concat(limit) : \"\";\n                return this.get(\"/analytics/top-customers\".concat(query));\n            },\n            getCustomerInsights: ()=>this.get(\"/analytics/customer-insights\"),\n            getOrderTrends: (params)=>{\n                const query = params ? \"?\".concat(new URLSearchParams(params)) : \"\";\n                return this.get(\"/analytics/order-trends\".concat(query));\n            }\n        };\n        if (true) {\n            this.token = localStorage.getItem(\"token\");\n        }\n    }\n}\nconst apiClient = new APIClient();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LDJCQUFpQyxPQUFObUM7WUFDN0M7WUFDQXNCLHFCQUFxQixJQUFNLElBQUksQ0FBQ3pELEdBQUcsQ0FBQztZQUNwQzBELGdCQUFnQixDQUFDeEI7Z0JBQ2YsTUFBTUMsUUFBUUQsU0FBUyxJQUFnQyxPQUE1QixJQUFJRSxnQkFBZ0JGLFdBQVk7Z0JBQzNELE9BQU8sSUFBSSxDQUFDbEMsR0FBRyxDQUFDLDBCQUFnQyxPQUFObUM7WUFDNUM7UUFDRjtRQTVRRSxJQUFJLElBQTZCLEVBQUU7WUFDakMsSUFBSSxDQUFDNUQsS0FBSyxHQUFHQyxhQUFhbUYsT0FBTyxDQUFDO1FBQ3BDO0lBQ0Y7QUEwUUY7QUFFTyxNQUFNQyxZQUFZLElBQUl2RixZQUFZO0FBQ3pDLCtEQUFldUYsU0FBU0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvYXBpLnRzPzY4YTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFubmVyRGF0YSB9IGZyb20gXCJAL2NvbXBvbmVudHMvQnVzaW5lc3NCYW5uZXJcIjtcbmltcG9ydCB7IEN1c3RvbWVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy9DdXN0b21lckxvb2t1cFwiO1xuXG5leHBvcnQgY29uc3QgQVBJX0JBU0VfVVJMID1cbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGlcIjtcblxuY2xhc3MgQVBJQ2xpZW50IHtcbiAgcHJpdmF0ZSB0b2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMudG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpO1xuICAgIH1cbiAgfVxuXG4gIHNldFRva2VuKHRva2VuOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidG9rZW5cIiwgdG9rZW4pO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyVG9rZW4oKSB7XG4gICAgdGhpcy50b2tlbiA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwidG9rZW5cIik7XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLSBIZWxwZXJzIC0tLS0tLS0tLS1cbiAgcHJpdmF0ZSBhdXRoSGVhZGVyKCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLnRva2VuID8geyBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy50b2tlbn1gIH0gOiB7fTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVxdWVzdDxUPihcbiAgICBlbmRwb2ludDogc3RyaW5nLFxuICAgIG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge31cbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IG9wdGlvbnMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhO1xuXG4gICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIC4uLnRoaXMuYXV0aEhlYWRlcigpLFxuICAgICAgLi4uKG9wdGlvbnMuaGVhZGVycyBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSxcbiAgICAgIC8vIE9ubHkgc2V0IEpTT04gY29udGVudC10eXBlIGlmIG5vdCBzZW5kaW5nIEZvcm1EYXRhXG4gICAgICAuLi4oaXNGb3JtRGF0YSA/IHt9IDogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9KSxcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9JHtlbmRwb2ludH1gLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVycyxcbiAgICB9KTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIC8vIFRyeSB0byBzdXJmYWNlIHNlcnZlciBlcnJvciBtZXNzYWdlOyBmYWxsIGJhY2sgdG8gc3RhdHVzIHRleHRcbiAgICAgIGxldCBtZXNzYWdlID0gcmVzcG9uc2Uuc3RhdHVzVGV4dCB8fCBcIkFuIGVycm9yIG9jY3VycmVkXCI7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBlcnIgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGlmICh0eXBlb2YgZXJyPy5lcnJvciA9PT0gXCJzdHJpbmdcIikgbWVzc2FnZSA9IGVyci5lcnJvcjtcbiAgICAgICAgaWYgKHR5cGVvZiBlcnI/Lm1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICAvKiBpZ25vcmUgKi9cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvLyBJZiBzZXJ2ZXIgcmV0dXJucyAyMDQgTm8gQ29udGVudFxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwNCkgcmV0dXJuIHVuZGVmaW5lZCBhcyBUO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKSBhcyBQcm9taXNlPFQ+O1xuICB9XG5cbiAgYXN5bmMgZ2V0PFQ+KGVuZHBvaW50OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFQ+KGVuZHBvaW50LCB7IG1ldGhvZDogXCJHRVRcIiB9KTtcbiAgfVxuXG4gIGFzeW5jIHBvc3Q8VD4oZW5kcG9pbnQ6IHN0cmluZywgZGF0YT86IHVua25vd24pOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBib2R5ID1cbiAgICAgIGRhdGEgaW5zdGFuY2VvZiBGb3JtRGF0YVxuICAgICAgICA/IGRhdGFcbiAgICAgICAgOiBkYXRhICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8VD4oZW5kcG9pbnQsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBib2R5LFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgcHV0PFQ+KGVuZHBvaW50OiBzdHJpbmcsIGRhdGE/OiB1bmtub3duKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgYm9keSA9XG4gICAgICBkYXRhIGluc3RhbmNlb2YgRm9ybURhdGFcbiAgICAgICAgPyBkYXRhXG4gICAgICAgIDogZGF0YSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFQ+KGVuZHBvaW50LCB7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBib2R5LFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgcGF0Y2g8VD4oZW5kcG9pbnQ6IHN0cmluZywgZGF0YT86IHVua25vd24pOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBib2R5ID1cbiAgICAgIGRhdGEgaW5zdGFuY2VvZiBGb3JtRGF0YVxuICAgICAgICA/IGRhdGFcbiAgICAgICAgOiBkYXRhICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8VD4oZW5kcG9pbnQsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgYm9keSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZTxUPihlbmRwb2ludDogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxUPihlbmRwb2ludCwgeyBtZXRob2Q6IFwiREVMRVRFXCIgfSk7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tIEJhbm5lcnMgLS0tLS0tLS0tLVxuICBiYW5uZXJzID0ge1xuICAgIGNyZWF0ZTogKGRhdGE6IHVua25vd24pID0+IHRoaXMucG9zdChcIi9iYW5uZXJzXCIsIGRhdGEpLFxuICAgIGdldDogKGJ1c2luZXNzSWQ6IHN0cmluZykgPT4gdGhpcy5nZXQ8QmFubmVyRGF0YT4oYC9iYW5uZXJzLyR7YnVzaW5lc3NJZH1gKSxcbiAgICB1cGRhdGU6IChidXNpbmVzc0lkOiBzdHJpbmcsIGRhdGE6IHVua25vd24pID0+XG4gICAgICB0aGlzLnB1dChgL2Jhbm5lcnMvJHtidXNpbmVzc0lkfWAsIGRhdGEpLFxuICAgIGRlbGV0ZTogKGJ1c2luZXNzSWQ6IHN0cmluZykgPT4gdGhpcy5kZWxldGUoYC9iYW5uZXJzLyR7YnVzaW5lc3NJZH1gKSxcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tIEF1dGggLS0tLS0tLS0tLVxuICBhdXRoID0ge1xuICAgIHJlZ2lzdGVyOiAoZGF0YTogdW5rbm93bikgPT4gdGhpcy5wb3N0KFwiL2F1dGgvcmVnaXN0ZXJcIiwgZGF0YSksXG4gICAgbG9naW46IChkYXRhOiB1bmtub3duKSA9PiB0aGlzLnBvc3QoXCIvYXV0aC9sb2dpblwiLCBkYXRhKSxcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tIEN1c3RvbWVycyAtLS0tLS0tLS0tXG4gIHByaXZhdGUgdG9DdXN0b21lcih1OiB1bmtub3duKTogQ3VzdG9tZXIge1xuICAgIGNvbnN0IG8gPSB1IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG4gICAgY29uc3QgaWQgPVxuICAgICAgdHlwZW9mIG8/LmlkID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBvPy5pZCA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IChvLmlkIGFzIHN0cmluZyB8IG51bWJlcilcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbmFtZSA9IHR5cGVvZiBvPy5uYW1lID09PSBcInN0cmluZ1wiID8gby5uYW1lLnRyaW0oKSA6IFwiXCI7XG5cbiAgICBpZiAoIWlkIHx8ICFuYW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGN1c3RvbWVyOiBtaXNzaW5nIGlkIG9yIG5hbWUuXCIpO1xuXG4gICAgY29uc3QgcGhvbmUgPVxuICAgICAgdHlwZW9mIG8/LnBob25lID09PSBcInN0cmluZ1wiICYmIG8ucGhvbmUudHJpbSgpXG4gICAgICAgID8gby5waG9uZS50cmltKClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgZW1haWwgPVxuICAgICAgdHlwZW9mIG8/LmVtYWlsID09PSBcInN0cmluZ1wiICYmIG8uZW1haWwudHJpbSgpXG4gICAgICAgID8gby5lbWFpbC50cmltKClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgYXZhdGFyID1cbiAgICAgIHR5cGVvZiBvPy5hdmF0YXIgPT09IFwic3RyaW5nXCIgJiYgby5hdmF0YXIudHJpbSgpXG4gICAgICAgID8gby5hdmF0YXIudHJpbSgpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIHsgaWQsIG5hbWUsIHBob25lLCBlbWFpbCwgYXZhdGFyIH07XG4gIH1cblxuICBwcml2YXRlIHRvQ3VzdG9tZXJzUmVzcG9uc2UodTogdW5rbm93bik6IHsgY3VzdG9tZXJzOiBDdXN0b21lcltdIH0ge1xuICAgIGNvbnN0IG8gPSB1IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgIGNvbnN0IGFyciA9IEFycmF5LmlzQXJyYXkobz8uY3VzdG9tZXJzKSA/IChvLmN1c3RvbWVycyBhcyB1bmtub3duW10pIDogbnVsbDtcbiAgICBpZiAoIWFycilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmVzcG9uc2U6IGBjdXN0b21lcnNgIG11c3QgYmUgYW4gYXJyYXkuXCIpO1xuICAgIHJldHVybiB7IGN1c3RvbWVyczogYXJyLm1hcCgoeCkgPT4gdGhpcy50b0N1c3RvbWVyKHgpKSB9O1xuICB9XG5cbiAgY3VzdG9tZXJzID0ge1xuICAgIGdldEFsbDogKHBhcmFtcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gcGFyYW1zID8gYD8ke25ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zKX1gIDogXCJcIjtcbiAgICAgIHJldHVybiB0aGlzLmdldChgL2N1c3RvbWVycyR7cXVlcnl9YCk7XG4gICAgfSxcblxuICAgIGdldE15Q3VzdG9tZXI6IGFzeW5jICgpOiBQcm9taXNlPHsgY3VzdG9tZXJzOiBDdXN0b21lcltdIH0+ID0+IHtcbiAgICAgIC8vIHRoaXMuZ2V0IHJldHVybnMgcGFyc2VkIEpTT04gYWxyZWFkeVxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZ2V0PHVua25vd24+KGAvY3VzdG9tZXJzL215YCk7XG4gICAgICByZXR1cm4gdGhpcy50b0N1c3RvbWVyc1Jlc3BvbnNlKGRhdGEpO1xuICAgIH0sXG5cbiAgICBnZXRPbmU6IChpZDogc3RyaW5nKSA9PiB0aGlzLmdldChgL2N1c3RvbWVycy8ke2lkfWApLFxuICAgIGNyZWF0ZTogKGRhdGE6IHVua25vd24pID0+IHRoaXMucG9zdChcIi9jdXN0b21lcnNcIiwgZGF0YSksXG4gICAgdXBkYXRlOiAoaWQ6IHN0cmluZywgZGF0YTogdW5rbm93bikgPT4gdGhpcy5wdXQoYC9jdXN0b21lcnMvJHtpZH1gLCBkYXRhKSxcbiAgICBkZWxldGU6IChpZDogc3RyaW5nKSA9PiB0aGlzLmRlbGV0ZShgL2N1c3RvbWVycy8ke2lkfWApLFxuICAgIGdldFN0YXRzOiAoKSA9PiB0aGlzLmdldChcIi9jdXN0b21lcnMvc3RhdHNcIiksXG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLSBPcmRlcnMgLS0tLS0tLS0tLVxuICBvcmRlcnMgPSB7XG4gICAgZ2V0QWxsOiAocGFyYW1zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBwYXJhbXMgPyBgPyR7bmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpfWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KGAvb3JkZXJzJHtxdWVyeX1gKTtcbiAgICB9LFxuICAgIGdldEN1c3RvbWVyT3JkZXJzOiBhc3luYyAoY3VzdG9tZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXQoYC9jdXN0b21lcnMvJHtjdXN0b21lcklkfS9vcmRlcnNgKTtcbiAgICB9LFxuICAgIGdldE9uZTogKGlkOiBzdHJpbmcpID0+IHRoaXMuZ2V0KGAvb3JkZXJzLyR7aWR9YCksXG4gICAgZ2V0U3RhdHM6ICgpID0+IHRoaXMuZ2V0KFwiL29yZGVycy9zdGF0c1wiKSxcbiAgICBjcmVhdGU6IChkYXRhOiB1bmtub3duKSA9PiB0aGlzLnBvc3QoXCIvb3JkZXJzXCIsIGRhdGEpLFxuICAgIHVwZGF0ZTogKGlkOiBzdHJpbmcsIGRhdGE6IHVua25vd24pID0+IHRoaXMucHV0KGAvb3JkZXJzLyR7aWR9YCwgZGF0YSksXG4gICAgZGVsZXRlOiAoaWQ6IHN0cmluZykgPT4gdGhpcy5kZWxldGUoYC9vcmRlcnMvJHtpZH1gKSxcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tIE1lYXN1cmVtZW50cyAtLS0tLS0tLS0tXG4gIG1lYXN1cmVtZW50cyA9IHtcbiAgICBnZXRBbGw6IChwYXJhbXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IHBhcmFtcyA/IGA/JHtuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcyl9YCA6IFwiXCI7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoYC9tZWFzdXJlbWVudHMke3F1ZXJ5fWApO1xuICAgIH0sXG4gICAgZ2V0Q3VzdG9tZXJNZWFzdXJlbWVudHM6IGFzeW5jIChjdXN0b21lcklkOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmdldChgL21lYXN1cmVtZW50cy9jdXN0b21lci8ke2N1c3RvbWVySWR9YCk7XG4gICAgfSxcbiAgICBnZXRPbmU6IChpZDogc3RyaW5nKSA9PiB0aGlzLmdldChgL21lYXN1cmVtZW50cy8ke2lkfWApLFxuICAgIGNyZWF0ZTogKGRhdGE6IHVua25vd24pID0+IHRoaXMucG9zdChcIi9tZWFzdXJlbWVudHNcIiwgZGF0YSksXG4gICAgdXBkYXRlOiAoaWQ6IHN0cmluZywgZGF0YTogdW5rbm93bikgPT5cbiAgICAgIHRoaXMucHV0KGAvbWVhc3VyZW1lbnRzLyR7aWR9YCwgZGF0YSksXG4gICAgZGVsZXRlOiAoaWQ6IHN0cmluZykgPT4gdGhpcy5kZWxldGUoYC9tZWFzdXJlbWVudHMvJHtpZH1gKSxcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tIEludm9pY2VzIC0tLS0tLS0tLS1cbiAgaW52b2ljZXMgPSB7XG4gICAgZ2V0QWxsOiAocGFyYW1zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBwYXJhbXMgPyBgPyR7bmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpfWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KGAvaW52b2ljZXMke3F1ZXJ5fWApO1xuICAgIH0sXG4gICAgZ2V0T25lOiAoaWQ6IHN0cmluZykgPT4gdGhpcy5nZXQoYC9pbnZvaWNlcy8ke2lkfWApLFxuICAgIGNyZWF0ZTogKGRhdGE6IHVua25vd24pID0+IHRoaXMucG9zdChcIi9pbnZvaWNlc1wiLCBkYXRhKSxcbiAgICB1cGRhdGU6IChpZDogc3RyaW5nLCBkYXRhOiB1bmtub3duKSA9PiB0aGlzLnB1dChgL2ludm9pY2VzLyR7aWR9YCwgZGF0YSksXG4gICAgZ2VuZXJhdGVQREY6IChpZDogc3RyaW5nKSA9PiB0aGlzLnBvc3QoYC9pbnZvaWNlcy8ke2lkfS9nZW5lcmF0ZS1wZGZgKSxcbiAgICBzZW5kRW1haWw6IChpZDogc3RyaW5nKSA9PiB0aGlzLnBvc3QoYC9pbnZvaWNlcy8ke2lkfS9zZW5kLWVtYWlsYCksXG4gICAgZGVsZXRlOiAoaWQ6IHN0cmluZykgPT4gdGhpcy5kZWxldGUoYC9pbnZvaWNlcy8ke2lkfWApLFxuICB9O1xuXG4gIC8vIC0tLS0tLS0tLS0gUHJvZHVjdHMgLS0tLS0tLS0tLVxuICBwcm9kdWN0cyA9IHtcbiAgICBnZXRBbGw6IChwYXJhbXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IHBhcmFtcyA/IGA/JHtuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcyl9YCA6IFwiXCI7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoYC9wcm9kdWN0cyR7cXVlcnl9YCk7XG4gICAgfSxcblxuICAgIGdldE15QWxsOiAocGFyYW1zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBwYXJhbXMgPyBgPyR7bmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpfWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KGAvcHJvZHVjdHMvbXkke3F1ZXJ5fWApO1xuICAgIH0sXG5cbiAgICBnZXRPbmU6IChpZDogc3RyaW5nKSA9PiB0aGlzLmdldChgL3Byb2R1Y3RzLyR7aWR9YCksXG4gICAgZ2V0Q2F0ZWdvcmllczogKCkgPT4gdGhpcy5nZXQoXCIvcHJvZHVjdHMvY2F0ZWdvcmllc1wiKSxcbiAgICBjcmVhdGU6IChkYXRhOiB1bmtub3duKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5wb3N0KFwiL3Byb2R1Y3RzXCIsIGRhdGEpO1xuICAgIH0sXG4gICAgdXBkYXRlOiAoaWQ6IHN0cmluZywgZGF0YTogdW5rbm93bikgPT4gdGhpcy5wdXQoYC9wcm9kdWN0cy8ke2lkfWAsIGRhdGEpLFxuICAgIGRlbGV0ZTogKGlkOiBzdHJpbmcpID0+IHRoaXMuZGVsZXRlKGAvcHJvZHVjdHMvJHtpZH1gKSxcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tIEFuYWx5dGljcyAtLS0tLS0tLS0tXG4gIGFuYWx5dGljcyA9IHtcbiAgICBnZXREYXNoYm9hcmQ6ICgpID0+IHRoaXMuZ2V0KFwiL2FuYWx5dGljcy9kYXNoYm9hcmRcIiksXG4gICAgZ2V0UmV2ZW51ZTogKHBhcmFtcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gcGFyYW1zID8gYD8ke25ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zKX1gIDogXCJcIjtcbiAgICAgIHJldHVybiB0aGlzLmdldChgL2FuYWx5dGljcy9yZXZlbnVlJHtxdWVyeX1gKTtcbiAgICB9LFxuICAgIGdldFRvcFByb2R1Y3RzOiAobGltaXQ/OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gbGltaXQgPyBgP2xpbWl0PSR7bGltaXR9YCA6IFwiXCI7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoYC9hbmFseXRpY3MvdG9wLXByb2R1Y3RzJHtxdWVyeX1gKTtcbiAgICB9LFxuICAgIGdldFRvcEN1c3RvbWVyczogKGxpbWl0PzogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IGxpbWl0ID8gYD9saW1pdD0ke2xpbWl0fWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KGAvYW5hbHl0aWNzL3RvcC1jdXN0b21lcnMke3F1ZXJ5fWApO1xuICAgIH0sXG4gICAgZ2V0Q3VzdG9tZXJJbnNpZ2h0czogKCkgPT4gdGhpcy5nZXQoXCIvYW5hbHl0aWNzL2N1c3RvbWVyLWluc2lnaHRzXCIpLFxuICAgIGdldE9yZGVyVHJlbmRzOiAocGFyYW1zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBwYXJhbXMgPyBgPyR7bmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpfWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KGAvYW5hbHl0aWNzL29yZGVyLXRyZW5kcyR7cXVlcnl9YCk7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGFwaUNsaWVudCA9IG5ldyBBUElDbGllbnQoKTtcbmV4cG9ydCBkZWZhdWx0IGFwaUNsaWVudDtcbiJdLCJuYW1lcyI6WyJBUElfQkFTRV9VUkwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfQVBJX1VSTCIsIkFQSUNsaWVudCIsInNldFRva2VuIiwidG9rZW4iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiY2xlYXJUb2tlbiIsInJlbW92ZUl0ZW0iLCJhdXRoSGVhZGVyIiwiQXV0aG9yaXphdGlvbiIsInJlcXVlc3QiLCJlbmRwb2ludCIsIm9wdGlvbnMiLCJpc0Zvcm1EYXRhIiwiYm9keSIsIkZvcm1EYXRhIiwiaGVhZGVycyIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsIm1lc3NhZ2UiLCJzdGF0dXNUZXh0IiwiZXJyIiwianNvbiIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXMiLCJ1bmRlZmluZWQiLCJnZXQiLCJtZXRob2QiLCJwb3N0IiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwdXQiLCJwYXRjaCIsImRlbGV0ZSIsInRvQ3VzdG9tZXIiLCJ1IiwibyIsImlkIiwibmFtZSIsInRyaW0iLCJwaG9uZSIsImVtYWlsIiwiYXZhdGFyIiwidG9DdXN0b21lcnNSZXNwb25zZSIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsImN1c3RvbWVycyIsIm1hcCIsIngiLCJjb25zdHJ1Y3RvciIsImJhbm5lcnMiLCJjcmVhdGUiLCJidXNpbmVzc0lkIiwidXBkYXRlIiwiYXV0aCIsInJlZ2lzdGVyIiwibG9naW4iLCJnZXRBbGwiLCJwYXJhbXMiLCJxdWVyeSIsIlVSTFNlYXJjaFBhcmFtcyIsImdldE15Q3VzdG9tZXIiLCJnZXRPbmUiLCJnZXRTdGF0cyIsIm9yZGVycyIsImdldEN1c3RvbWVyT3JkZXJzIiwiY3VzdG9tZXJJZCIsIm1lYXN1cmVtZW50cyIsImdldEN1c3RvbWVyTWVhc3VyZW1lbnRzIiwiaW52b2ljZXMiLCJnZW5lcmF0ZVBERiIsInNlbmRFbWFpbCIsInByb2R1Y3RzIiwiZ2V0TXlBbGwiLCJnZXRDYXRlZ29yaWVzIiwiYW5hbHl0aWNzIiwiZ2V0RGFzaGJvYXJkIiwiZ2V0UmV2ZW51ZSIsImdldFRvcFByb2R1Y3RzIiwibGltaXQiLCJnZXRUb3BDdXN0b21lcnMiLCJnZXRDdXN0b21lckluc2lnaHRzIiwiZ2V0T3JkZXJUcmVuZHMiLCJnZXRJdGVtIiwiYXBpQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});